// Import the IPFS library
const { create } = require('ipfs-http-client');

// Initialize IPFS client
const ipfs = create({ url: 'https://ipfs.infura.io:5001/api/v0' });

// Function to register a new IoT device
async function registerDevice(deviceId, deviceType) {
    const deviceInfo = {
        deviceId,
        deviceType,
        status: 'registered',
        timestamp: new Date().toISOString(),
    };

    const dataBuffer = Buffer.from(JSON.stringify(deviceInfo));

    // Upload device info to IPFS
    const result = await ipfs.add(dataBuffer);
    console.log('Device registered and uploaded to IPFS:', result.path);
    return result.path; // Return the IPFS hash
}

// Function to fetch device info by IPFS hash
async function fetchDeviceInfo(ipfsHash) {
    const stream = ipfs.cat(ipfsHash);
    let data = '';

    for await (const chunk of stream) {
        data += chunk.toString();
    }

    return JSON.parse(data);
}

// Function to share sensor data
async function shareSensorData(deviceId, temperature, humidity) {
    const sensorData = {
        deviceId,
        temperature,
        humidity,
        timestamp: new Date().toISOString(),
    };

    const dataBuffer = Buffer.from(JSON.stringify(sensorData));

    // Upload sensor data to IPFS
    const result = await ipfs.add(dataBuffer);
    console.log('Sensor data shared and uploaded to IPFS:', result.path);
    return result.path; // Return the IPFS hash
}

// Example usage
(async () => {
    // Register a new IoT device
    const deviceHash = await registerDevice('Device001', 'TemperatureSensor');

    // Fetch device info
    const deviceInfo = await fetchDeviceInfo(deviceHash);
    console.log('Fetched Device Info:', deviceInfo);

    // Share sensor data
    const sensorDataHash = await shareSensorData('Device001', 22.5, 60);
    console.log('Shared Sensor Data Hash:', sensorDataHash);
})();
