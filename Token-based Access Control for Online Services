FRONTEND 
import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import AccessControlToken from './AccessControlToken.json'; // ABI file

const App = () => {
  const [account, setAccount] = useState('');
  const [contract, setContract] = useState(null);
  const [userAddress, setUserAddress] = useState('');
  const [accessLevel, setAccessLevel] = useState(0);

  useEffect(() => {
    const init = async () => {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const signer = provider.getSigner();
        const networkId = await provider.getNetwork().chainId;
        
        // Replace with your deployed contract address
        const contractAddress = 'YOUR_CONTRACT_ADDRESS';
        const contractInstance = new ethers.Contract(contractAddress, AccessControlToken.abi, signer);
        
        setContract(contractInstance);
        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
        setAccount(accounts[0]);
      }
    };
    init();
  }, []);

  const grantAccess = async () => {
    const tx = await contract.grantAccess(userAddress, accessLevel);
    await tx.wait();
    alert('Access granted!');
  };

  const revokeAccess = async () => {
    const tx = await contract.revokeAccess(userAddress);
    await tx.wait();
    alert('Access revoked!');
  };

  const checkAccess = async () => {
    const level = await contract.checkAccess(userAddress);
    alert(`Access Level: ${level}`);
  };

  return (
    <div>
      <h1>Token-based Access Control</h1>
      <p>Connected Account: {account}</p>
      <input
        type="text"
        value={userAddress}
        onChange={(e) => setUserAddress(e.target.value)}
        placeholder="User Address"
      />
      <input
        type="number"
        value={accessLevel}
        onChange={(e) => setAccessLevel(e.target.value)}
        placeholder="Access Level"
      />
      <button onClick={grantAccess}>Grant Access</button>
      <button onClick={revokeAccess}>Revoke Access</button>
      <button onClick={checkAccess}>Check Access</button>
    </div>
  );
};

export default App;



SOLIFITY
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AccessControlToken {
    string public name = "AccessControlToken";
    string public symbol = "ACT";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => uint256) public accessLevel;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event AccessGranted(address indexed user, uint256 level);
    event AccessRevoked(address indexed user);

    constructor(uint256 _initialSupply) {
        totalSupply = _initialSupply * (10 ** uint256(decimals));
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(balanceOf[msg.sender] >= _value, "Insufficient balance");

        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0), "Invalid address");
        require(balanceOf[_from] >= _value, "Insufficient balance");
        require(allowance[_from][msg.sender] >= _value, "Allowance exceeded");

        balanceOf[_from] -= _value;
        balanceOf[_to] += _value;
        allowance[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value);
        return true;
    }

    function grantAccess(address _user, uint256 _level) public {
        require(balanceOf[msg.sender] > 0, "Insufficient tokens to grant access");
        accessLevel[_user] = _level;
        emit AccessGranted(_user, _level);
    }

    function revokeAccess(address _user) public {
        require(balanceOf[msg.sender] > 0, "Insufficient tokens to revoke access");
        delete accessLevel[_user];
        emit AccessRevoked(_user);
    }

    function checkAccess(address _user) public view returns (uint256) {
        return accessLevel[_user];
    }

    receive() external payable {}
}
