import hashlib
import json
from time import time
from flask import Flask, jsonify, request

class Blockchain:
    def __init__(self):
        self.chain = []
        self.current_votes = []
        self.create_block(previous_hash='1', proof=100)  # Genesis block

    def create_block(self, proof, previous_hash):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time(),
            'votes': self.current_votes,
            'proof': proof,
            'previous_hash': previous_hash,
        }
        self.current_votes = []
        self.chain.append(block)
        return block

    def add_vote(self, voter, candidate):
        self.current_votes.append({
            'voter': voter,
            'candidate': candidate,
        })
        return self.last_block['index'] + 1

    @property
    def last_block(self):
        return self.chain[-1]

    def hash(self, block):
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    def get_results(self):
        results = {}
        for block in self.chain:
            for vote in block['votes']:
                candidate = vote['candidate']
                if candidate in results:
                    results[candidate] += 1
                else:
                    results[candidate] = 1
        return results

app = Flask(__name__)
blockchain = Blockchain()

@app.route('/start_voting', methods=['POST'])
def start_voting():
    # Start a new voting session (can include candidates and other details)
    return jsonify({'message': 'Voting session started!'}), 201

@app.route('/vote', methods=['POST'])
def vote():
    data = request.get_json()
    voter = data['voter']
    candidate = data['candidate']
    
    # Check if the voter has already voted (implement your own logic to track voters)
    for block in blockchain.chain:
        for vote in block['votes']:
            if vote['voter'] == voter:
                return jsonify({'message': 'You have already voted!'}), 403

    index = blockchain.add_vote(voter, candidate)
    previous_block = blockchain.last_block
    proof = 200  # This should be replaced with a proper proof-of-work
    blockchain.create_block(proof, blockchain.hash(previous_block))

    return jsonify({
        'message': 'Vote cast successfully!',
        'block_index': index,
        'block': blockchain.last_block
    }), 201

@app.route('/results', methods=['GET'])
def results():
    results = blockchain.get_results()
    return jsonify({'results': results}), 200

@app.route('/chain', methods=['GET'])
def full_chain():
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain),
    }
    return jsonify(response), 200

if __name__ == '__main__':
    app.run(debug=True)
