// IntellectualProperty.sol
pragma solidity ^0.8.0;

contract IntellectualProperty {
    struct IPAsset {
        uint id;
        string name;
        string description;
        address owner;
        uint timestamp;
    }

    mapping(uint => IPAsset) public ipAssets;
    mapping(string => uint) public nameToId;
    uint public assetCount;

    event AssetRegistered(uint id, string name, address owner, string description);

    function registerAsset(string memory _name, string memory _description) public {
        require(nameToId[_name] == 0, "Asset already registered");
        
        assetCount++;
        ipAssets[assetCount] = IPAsset(assetCount, _name, _description, msg.sender, block.timestamp);
        nameToId[_name] = assetCount;

        emit AssetRegistered(assetCount, _name, msg.sender, _description);
    }

    function verifyOwnership(string memory _name) public view returns (address) {
        uint id = nameToId[_name];
        require(id != 0, "Asset not found");
        return ipAssets[id].owner;
    }

    function getAssetDetails(uint _id) public view returns (string memory, string memory, address, uint) {
        IPAsset memory asset = ipAssets[_id];
        return (asset.name, asset.description, asset.owner, asset.timestamp);
    }
}
